#!/usr/bin/env python3
"""
This node is going to control the Baxter to grap and place cups to build a tower.


SERVICES:
  + test_control (ControlTest)
"""

import rospy
import sys
import moveit_commander
from geometry_msgs.msg import Pose, Quaternion
from std_srvs.srv import Empty
from tower.srv import Step, ControlTest
from tf.transformations import quaternion_from_euler, euler_from_quaternion
from baxter_interface import Gripper
from tower.simulator import Scene
from tower.buildTower import BuildTower

REAL_ROBOT = True # Real Robot
# REAL_ROBOT = False # fake Robot


class Handler:
    """ Helper class for node arm_control.
    Will sort cups then build tower by grabbing and placing cups using either one hand or both hands.
    """
    def __init__(self):
        self.HOME_JOINTS = [0.5,  -0.74, -1.28, 0.97, -0.18, 0.03, -0.01, \
                            -0.5, -0.74, 1.28, 0.97, -0.18, 0.03, 0.03] 
        self.PRE_GRASP_POS = [-0.03, 0.0, 0.03] 
        self.BEFORE_PLACE_POS = [0.0, 0.0, 0.1]
        
        # robot control 
        self.robot = moveit_commander.RobotCommander(robot_description='robot_description')
        scene = moveit_commander.PlanningSceneInterface()
        self.both_arms_group = moveit_commander.MoveGroupCommander("both_arms", robot_description='robot_description')
        self.left_arm_group = moveit_commander.MoveGroupCommander("left_arm", robot_description='robot_description')
        self.right_arm_group = moveit_commander.MoveGroupCommander("right_arm", robot_description='robot_description')
        self.right_gripper = Gripper('right')
        self.right_gripper.calibrate(timeout=1.0)
        self.left_gripper = Gripper('left')
        self.left_gripper.calibrate(timeout=1.0)

        # service
        self.test_control = rospy.Service("test_control", ControlTest, self.test_control_callback)

        # create scene 
        self.myscene = Scene(scene,REAL_ROBOT)
        self.myscene.create_scene()
        self.myscene.create_sorted_list_position(True) #False for first

        # tower class 
        self.buildTower = BuildTower()

        rospy.loginfo("SET UP READY")

    def go_home_position(self):
        """ go to HOME position for easier grasping """

        target = self.HOME_JOINTS
        self.both_arms_group.set_joint_value_target(target)
        self.execute_path()


    def gripper_control(self,state,gripper):
        """Control Of grippers
        Arg
            state --> True  open  gripper
            state --> False close gripper
            gripper --> left_gripper or right_gripper or both
        """
        if(gripper=="left_gripper"):
            if(state):
                self.left_gripper.open(block=True)
            else:
                self.left_gripper.close(block=True)
        elif(gripper=="right_gripper"):
            if(state):
                self.right_gripper.open(block=True)
            else:
                self.right_gripper.close(block=True)   
        elif(gripper=="both"):
            if(state):
                self.right_gripper.open(block=True)
                self.left_gripper.open(block=True)
            else:
                self.right_gripper.close(block=True)  
                self.left_gripper.close(block=True)
        else:
            rospy.logerr("Wrong gripper !")
   
    def go_to(self,pose_goal,hand):
        """ helper function for planning to pose_goal
            
            Args: 
                pose_goal(Pose) - position of eef
                hand(String) - name of gripper to use
        """
        self.both_arms_group.set_pose_target(pose_goal, end_effector_link = hand)
    
    def execute_path(self):
        """ helper function for executing planned path in both_arms_group """ 
        (result, plan, frac, errCode) = self.both_arms_group.plan()
        result = self.both_arms_group.execute(plan, wait=True)
        self.both_arms_group.stop()
        self.both_arms_group.clear_pose_target(end_effector_link = "left_gripper")
        self.both_arms_group.clear_pose_target(end_effector_link = "right_gripper")

    def orientation_forward(self,pose):
        """ helper function for setting the orientation sideway at given pose 

            Args:
                pose (Pose) - pose to orient

            Return:
                pose (Pose) - pose after oriented 
        """
        
        q = quaternion_from_euler(0, 1.5707,0)
        pose.position.z +=0.2
        pose.orientation.x = q[0]
        pose.orientation.y = q[1]
        pose.orientation.z = q[2]
        pose.orientation.w = q[3]
        return pose

    def orientation_sideway(self, pose, hand, sorting):
        """ helper function for setting the orientation sideway at given pose 

            Args:
                pose (Pose) - pose to orient
                hand (string) - "left_gripper" or "right_gripper"
                sorting (bool) - whether the cups are being sorted. 
                                If yes, gripper should point outward, otherwise, point intward
            Return:
                pose (Pose) - pose after oriented 
        """
        rpy = [0, 0, 0]
        if (hand == "right_gripper" and not sorting) or (hand == "left_gripper" and sorting):
            rpy = [-0.785, 1.5707, 0]
        elif (hand == "left_gripper" and not sorting) or (hand == "right_gripper" and sorting):
            rpy = [0.785, 1.5707, 0]

        q = quaternion_from_euler(rpy[0], rpy[1], rpy[2])
        pose.orientation.x = q[0]
        pose.orientation.y = q[1]
        pose.orientation.z = q[2]
        pose.orientation.w = q[3]
        return pose

    def test_control_callback(self, req):
        """ helper service for testing other services or functions.
            Edit the inputs for service to test different cases.
            Args:
                req.choice - choose which test to execute
                            0. print current pose of left and right arm
                            1. set hands at home position (grab the hands above table before calling this)
                            2. restart scene workstation
                            3. restart scene inline
                            4. left hand grab and place cup
                            5. right hand grab and place cup
                            6. both hands grab and place
                            7. building tower (state_2)
                            8. close both grippers
                            9. open both grippers
        """
        if req.choice == 0: 
            result = self.current_pose()
            return result.replace('\n', ' ')
        elif req.choice == 1:
            self.go_home_position()
            return "HOME"
        elif req.choice == 2:
            self.myscene.restart_scene_workStation()
            return "restart scene workstation"
        elif req.choice == 3:
            self.myscene.restart_scene_inline()
            return "restart scene inline"
        elif req.choice == 4:
            self.grab_and_place_one_hand("left_gripper", (1.0, 0.5, 0.2), (1.0, 0.0681, 0.2))
            return "left hand grab and place cup"
        elif req.choice == 5:
            self.grab_and_place_one_hand("right_gripper", (1.0, -0.5, 0.2), (1.0, -0.0681, 0.2))
            return "right hand grab and place cup"
        elif req.choice == 6:
            self.grab_and_place_two_hands(((1.0, 0.5, 0.2), (1.0, 0.0681, 0.2)), ((1.0, -0.5, 0.2), (1.0, -0.0681, 0.2)))
            return "both hands grab and place "
        elif req.choice == 7:
            self.state_2(3)
            return "building tower with three cups"
        elif req.choice == 8:
            self.gripper_control(state=False,gripper="both")
            return "close both grippers"
        elif req.choice == 9:
            self.gripper_control(state=True,gripper="both")
            return "open both grippers"
        elif req.choice == 10:
            self.state_2(6)
            return "building tower with six cups"


        return "N/A"

    def state_2(self, num):
        """
        from a sorted cup enviroment 
        BUILDS A CUP TOWER !

            Args:
                num (int) - number of cups used to build the tower. Options are 3 and 6.
        """
        if num == 3:
            placePosList, useHandList  = self.buildTower.tower_3_cups()
        elif num == 6:
            pass
        rospy.loginfo(f"placePosList = {placePosList}")
        rospy.loginfo(f"useHandList = {useHandList}")

        i = 0
        while i < len(placePosList):
            if useHandList[i] == "right_gripper" and (i < len(placePosList)-1 and useHandList[i+1] == "left_gripper"):
                rightPlace = placePosList[i]
                leftPlace = placePosList[i+1]
                i += 2
                rightGrabPos = self.myscene.get_next_sorting_position("right_gripper").position
                rightGrab = (rightGrabPos.x, rightGrabPos.y, rightGrabPos.z)
                leftGrabPos = self.myscene.get_next_sorting_position("left_gripper").position
                leftGrab = (leftGrabPos.x, leftGrabPos.y, leftGrabPos.z)
                rospy.loginfo(f"right_gripper = {rightGrab} --> {rightPlace}")
                rospy.loginfo(f"left_gripper = {leftGrab} --> {leftPlace}")
                self.grab_and_place_two_hands((leftGrab, leftPlace), (rightGrab, rightPlace))
                
            else:
                hand = useHandList[i]
                placePos = placePosList[i]
                grabPosition = self.myscene.get_next_sorting_position(hand).position
                grabPos = (grabPosition.x, grabPosition.y, grabPosition.z)
                rospy.loginfo(f"{hand} only = {grabPos} --> {placePos}")
                self.grab_and_place_one_hand(hand, grabPos, placePos)
                i += 1


    def grab_and_place_one_hand(self, hand, grabPos, placePos):
        """ grab and place a cup to another position using one hand
            
            Args: 
                hand (string) - "left_gripper" or "right_gripper"
                grabPos (x, y) - where to grab cup
                placePos (x, y) - where to place cup
        """
        rospy.loginfo("open gripper")
        self.gripper_control(state=True, gripper=hand)

        rospy.loginfo("Go to pregrasping position")
        pose_goal = Pose()
        pose_goal.position.x = grabPos[0] + self.PRE_GRASP_POS[0]
        pose_goal.position.y = grabPos[1] + self.PRE_GRASP_POS[1]
        pose_goal.position.z = grabPos[2] + self.PRE_GRASP_POS[2]
        pose_goal = self.orientation_forward(pose_goal)
        self.go_to(pose_goal,hand)
        self.execute_path()

        rospy.loginfo("grab")
        pose_goal = Pose()
        pose_goal.position.x = grabPos[0]
        pose_goal.position.y = grabPos[1]
        pose_goal.position.z = grabPos[2]
        pose_goal = self.orientation_forward(pose_goal)
        self.go_to(pose_goal,hand)
        self.execute_path()

        rospy.loginfo("close gripper")
        self.gripper_control(state=False, gripper=hand)

        rospy.loginfo("before place")  
        pose_goal = Pose()
        pose_goal.position.x = placePos[0] + self.BEFORE_PLACE_POS[0]
        pose_goal.position.y = placePos[1] + self.BEFORE_PLACE_POS[1]
        pose_goal.position.z = placePos[2] + self.BEFORE_PLACE_POS[2]
        pose_goal = self.orientation_sideway(pose_goal, hand, False)
        self.go_to(pose_goal,hand)
        self.execute_path()

        rospy.loginfo("place")  
        pose_goal = Pose()
        pose_goal.position.x = placePos[0]
        pose_goal.position.y = placePos[1]
        pose_goal.position.z = placePos[2]
        pose_goal = self.orientation_sideway(pose_goal, hand, False)
        self.go_to(pose_goal,hand)
        self.execute_path()

        rospy.loginfo("open gripper")
        self.gripper_control(state=True, gripper=hand)

        
    def grab_and_place_two_hands(self, leftPos, rightPos):
        """ grab and place a cup to another position using both hands
            
            Args:
                leftPos (tuple of two tuples in form of (grab, place) where grab = (x, y, z), place = (x, y, z)
                    - traj of left hand
                rightPos (tuple of two tuples in form of (grab, place) where grab = (x, y, z), place = (x, y, z)
                    - traj of right hand
        """
        rospy.loginfo("open gripper")
        self.gripper_control(state=True, gripper="left_gripper")
        self.gripper_control(state=True, gripper="right_gripper")
        leftGrab = leftPos[0]
        leftPlace = leftPos[1]
        rightGrab = rightPos[0]
        rightPlace = rightPos[1]

        rospy.loginfo("Go to pregrasping position")
        pose_goal = Pose()
        pose_goal.position.x = leftGrab[0] + self.PRE_GRASP_POS[0]
        pose_goal.position.y = leftGrab[1] + self.PRE_GRASP_POS[1]
        pose_goal.position.z = leftGrab[2] + self.PRE_GRASP_POS[2]
        pose_goal = self.orientation_forward(pose_goal)
        self.go_to(pose_goal,"left_gripper")
        pose_goal.position.x = rightGrab[0] + self.PRE_GRASP_POS[0]
        pose_goal.position.y = rightGrab[1] + self.PRE_GRASP_POS[1]
        pose_goal.position.z = rightGrab[2] + self.PRE_GRASP_POS[2]
        pose_goal = self.orientation_forward(pose_goal)
        self.go_to(pose_goal,"right_gripper")
        self.execute_path()

        rospy.loginfo("grab")
        pose_goal = Pose()
        pose_goal.position.x = leftGrab[0]
        pose_goal.position.y = leftGrab[1]
        pose_goal.position.z = leftGrab[2]
        pose_goal = self.orientation_forward(pose_goal)
        self.go_to(pose_goal,"left_gripper")
        pose_goal.position.x = rightGrab[0]
        pose_goal.position.y = rightGrab[1]
        pose_goal.position.z = rightGrab[2]
        pose_goal = self.orientation_forward(pose_goal)
        self.go_to(pose_goal,"right_gripper")
        self.execute_path()

        rospy.loginfo("close gripper")
        self.gripper_control(state=False, gripper="left_gripper")
        self.gripper_control(state=False, gripper="right_gripper")

        rospy.loginfo("before place")  
        pose_goal = Pose()
        pose_goal.position.x = leftPlace[0] + self.BEFORE_PLACE_POS[0]
        pose_goal.position.y = leftPlace[1] + self.BEFORE_PLACE_POS[1]
        pose_goal.position.z = leftPlace[2] + self.BEFORE_PLACE_POS[2]
        pose_goal = self.orientation_sideway(pose_goal, "left_gripper", False)
        self.go_to(pose_goal,"left_gripper")
        pose_goal.position.x = rightPlace[0] + self.BEFORE_PLACE_POS[0]
        pose_goal.position.y = rightPlace[1] + self.BEFORE_PLACE_POS[1]
        pose_goal.position.z = rightPlace[2] + self.BEFORE_PLACE_POS[2]
        pose_goal = self.orientation_sideway(pose_goal, "right_gripper", False)
        self.go_to(pose_goal,"right_gripper")
        self.execute_path()

        rospy.loginfo("place")  
        pose_goal = Pose()
        pose_goal.position.x = leftPlace[0]
        pose_goal.position.y = leftPlace[1]
        pose_goal.position.z = leftPlace[2]
        pose_goal = self.orientation_sideway(pose_goal, "left_gripper", False)
        self.go_to(pose_goal,"left_gripper")
        pose_goal.position.x = rightPlace[0]
        pose_goal.position.y = rightPlace[1]
        pose_goal.position.z = rightPlace[2]
        pose_goal = self.orientation_sideway(pose_goal, "right_gripper", False)
        self.go_to(pose_goal,"right_gripper")
        self.execute_path()

        rospy.loginfo("open gripper")
        self.gripper_control(state=True, gripper="left_gripper")
        self.gripper_control(state=True, gripper="right_gripper")


    def state_1(self):
        """
        gets all cups from random locations and places them sorted at left/right side of the table
        For each arm 
        1 Assign a cup to grasp (left arm gets y>0 right arm gets y<0)
        2 Get position of cup
        3 Go to pregrasping position ( near the cup)
        4 Go to grasping position of cup
        5 Close gripper
        6 Attach cup at robot
        7 Get leaving cup position
        8 Go to leaving position
        9 Open gripper
        10 Detach cup from robot
        11 Go to Home position
        13 Repeat until all cups are sorted
        """
        pass

    def current_pose(self):
        """ helper service for debugging current pose of gripper"""
        left_current = self.both_arms_group.get_current_pose(end_effector_link = "left_gripper")
        q = left_current.pose.orientation
        left_angles = euler_from_quaternion([q.x, q.y, q.z, q.w])

        right_current = self.both_arms_group.get_current_pose(end_effector_link = "right_gripper")
        q = left_current.pose.orientation
        right_angles = euler_from_quaternion([q.x, q.y, q.z, q.w])
        return f"left pos = {left_current.pose.position}, left euler = {left_angles}; right pos = {right_current.pose.position}, right euler = {right_angles}"


def main():
    """ The main() function. """
    moveit_commander.roscpp_initialize(sys.argv)
    rospy.loginfo(sys.argv)
    rospy.init_node('arm_control')
    handler = Handler()
    rospy.spin()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass