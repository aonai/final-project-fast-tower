#!/usr/bin/env python

import pyrealsense2 as rs
import numpy as np
import cv2
import apriltag

# Configure depth and color streams
pipeline = rs.pipeline()
config = rs.config()
config.enable_stream(rs.stream.depth, 640, 480, rs.format.z16, 30)
config.enable_stream(rs.stream.color, 640, 480, rs.format.bgr8, 30)

# Start streaming
pipeline.start(config)

try:
    while True:

        # Wait for a coherent pair of frames: depth and color
        frames = pipeline.wait_for_frames()
        depth_frame = frames.get_depth_frame()
        color_frame = frames.get_color_frame()
        if not depth_frame or not color_frame:
            continue

        # Convert images to numpy arrays
        depth_image = np.asanyarray(depth_frame.get_data())
        color_image = np.asanyarray(color_frame.get_data())
       
        detector = apriltag.Detector()

        img = color_image
        detector = apriltag.Detector()
        gray_scale = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

        results = detector.detect(gray_scale)
        for cur_result in results:
            tag_id = cur_result.tag_id
            cx = cur_result.center.astype(np.int32)
            corners = cur_result.corners.astype(np.int32)
            for pt in corners:
                cv2.circle(img, tuple(pt), 3, (255, 0, 0))

            cv2.circle(img, tuple(cx), 3, (0, 0, 255))
            cv2.putText(img, str(tag_id), tuple(cx), cv2.FONT_HERSHEY_COMPLEX, 0.8, (0, 255, 0))

        cv2.imshow('img', img)
        cv2.waitKey(2)



        # # Apply colormap on depth image (image must be converted to 8-bit per pixel first)
        depth_colormap = cv2.applyColorMap(cv2.convertScaleAbs(depth_image, alpha=0.03), cv2.COLORMAP_JET)

        # Stack both images horizontally
        images = np.hstack((color_image, depth_colormap))

        # Show images
        cv2.namedWindow('RealSense', cv2.WINDOW_AUTOSIZE)
        cv2.imshow('RealSense', images)

finally:

    # Stop streaming
    pipeline.stop()