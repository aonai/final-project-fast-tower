#!/usr/bin/env python
# -*- coding: utf-8 -*-
import rospy
import cv2
import apriltag
from cv_bridge import CvBridge, CvBridgeError
from sensor_msgs.msg import CompressedImage, CameraInfo, Image
# from vapaa_cruiser.msg import apriltagDetectArray, apriltagDetect
from tower.msg import apriltagDetectArray, apriltagDetect
import apriltag
import tf
import numpy as np

class ApriltagDetector():
    def __init__(self):
        self.br = CvBridge()
        self.detector = apriltag.Detector(apriltag.DetectorOptions(families="tag36h11") )
        self.camParam = None
        self.inFrame = None
        self.outFrame = None
        self.frameID = None
        self.frameReady = None
        self.tagSize = rospy.get_param("~tagSize",30)
        self.updateRate = rospy.get_param("~updateRate",30)

        self.subImage = rospy.Subscriber("image/compressed",CompressedImage,self.UpdateFrame)

        self.baxter_cam_sub = rospy.Subscriber('/cameras/right_hand_camera/image',Image, self.cam_callback,queue_size=1)

        self.subInfo = rospy.Subscriber("camera/camera/info",CameraInfo,self.UpdateCameraInfo)

        # self.pubImage = rospy.Publisher("apriltag/detected/compressed",CompressedImage,queue_size=1)
        self.pubImage = rospy.Publisher( "/camera_rect/image_rect", Image, queue_size = 1   )
        self.pubInfo = rospy.Publisher("apriltag/detected/info",apriltagDetectArray,queue_size=1)

    def cam_callback(self,msg):
        self.pubImage.publish(msg)
        # self.inFrame = self.br.compressed_imgmsg_to_cv2(msg, "bgr8")
        self.inFrame = self.br.imgmsg_to_cv2(msg, desired_encoding='passthrough')
        self.frameReady = True

    def UpdateCameraInfo(self,msg):
        self.camParam = [msg.K[0], msg.K[4], msg.K[2], msg.K[5]]
        self.frameID = msg.header.frame_id

    def UpdateFrame(self,msg):
        print('update')
        try:
            self.inFrame = self.br.compressed_imgmsg_to_cv2(msg, "bgr8")
        except CvBridgeError as e:
            print(e)
        self.frameReady = True

    def Run(self):
        rate = rospy.Rate(self.updateRate)
        while not rospy.is_shutdown():
            if self.frameReady:
                gray = cv2.cvtColor(self.inFrame, cv2.COLOR_BGR2GRAY)
                self.outFrame = self.inFrame.copy()
                infoMsg = apriltagDetectArray()
                infoMsg.header.frame_id = self.frameID
                infoMsg.header.stamp = rospy.Time.now()

                tags = self.detector.detect(gray)
                results = tags
                img = self.outFrame
                print('check')

                for cur_result in results:
                    tag_id = cur_result.tag_id
                    cx = cur_result.center.astype(np.int32)
                    corners = cur_result.corners.astype(np.int32)
                    for pt in corners:
                        cv2.circle(img, tuple(pt), 3, (255, 0, 0))

                    cv2.circle(img, tuple(cx), 3, (0, 0, 255))
                    cv2.putText(img, str(tag_id), tuple(cx), cv2.FONT_HERSHEY_COMPLEX, 0.8, (0, 255, 0))
                cv2.imshow('window',self.outFrame)
                print('')
                
                for tag in tags:
                    cv2.line(self.outFrame, tuple(tag.corners[0].astype(int)), tuple(tag.corners[1].astype(int)), (0, 255, 0), 2)
                    cv2.line(self.outFrame, tuple(tag.corners[1].astype(int)), tuple(tag.corners[2].astype(int)), (0, 0, 255), 2)
                    cv2.line(self.outFrame, tuple(tag.corners[2].astype(int)), tuple(tag.corners[3].astype(int)), (255, 0, 0), 2)
                    cv2.line(self.outFrame, tuple(tag.corners[3].astype(int)), tuple(tag.corners[0].astype(int)), (255, 0, 0), 2)

                    tagInfo = apriltagDetect()
                    tagInfo.id = tag.tag_id
                    print(tagInfo.id)
                    # print('tagcheck')
                    for i in range(4):
                        tagInfo.corner[i].x = tag.corners[i][0]
                        tagInfo.corner[i].y = tag.corners[i][1]

                k = cv2.waitKey(2)
                #     if self.frameReady:
                #         pose, e0, e1 = self.detector.detection_pose(tag,self.camParam,self.tagSize)
                #         p = tf.transformations.translation_from_matrix(pose)
                #         o = tf.transformations.quaternion_from_matrix(pose)
                #         tagInfo.pose.position.x = p[0]
                #         tagInfo.pose.position.y = p[1]
                #         tagInfo.pose.position.z = p[2]
                #         tagInfo.pose.orientation.x = o[0]
                #         tagInfo.pose.orientation.y = o[1]
                #         tagInfo.pose.orientation.z = o[2]
                #         tagInfo.pose.orientation.w = o[3]
                #         print('pose check')

                #     infoMsg.tag_array.append(tagInfo)

                # imageMsg = self.br.cv2_to_compressed_imgmsg(self.outFrame)
                # self.pubImage.publish(imageMsg)
    
                # self.pubInfo.publish(infoMsg)
            # k = cv2.waitKey(2)
            rate.sleep()

    


if __name__ == '__main__':
    rospy.init_node('tracker')
    rospy.loginfo("apriltag_node started")
    ad = ApriltagDetector()
    ad.Run()
    rospy.spin
    