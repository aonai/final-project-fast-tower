#!/usr/bin/env python3
"""
This node is going to control the Baxter to grap a cup. 


SERVICES:
  + current_pose (Empty) ~ helper service for debugging. Will print out current pose of both grippers.
  + step (Step) ~ controls the grippers with given inputs.
"""

import rospy
import numpy as np
import sys
import moveit_commander
from std_srvs.srv import Empty
from geometry_msgs.msg import Pose, Quaternion,Point
from tower.srv import Step, ControlTest
from tf.transformations import*
from tf_conversions import transformations
from baxter_interface import Gripper
# from tf_conversions.transformations import quaternion_from_euler
from tower.simulator import Scene

class Handler:
    """ Helper class for node control_arm.
    Setup moveit for Baxter.
    """
    def __init__(self):
        self.START_JOINTS = [0.19, 1.04, -0.02, 0.49, -0.18, 0.03, -0.01, \
                             -0.27, 1.04, 0.03, 0.5, -0.08, 0.03, 0.03]
        self.HOME_JOINTS = [0.9,  -0.74, -1.28, 0.97, -0.18, 0.03, -0.01, \
                            -0.9, -0.74, 1.28, 0.97, -0.18, 0.03, 0.03] 
        # self.PRE_GRASP_POS = [0.06, 0.0, 0.15]
        # self.GRASP_POS = [0.06, 0.0, 0.03]
        self.PRE_GRASP_POS = [-0.03, 0.0, 0.03]
        self.GRASP_POS = [0.05, 0.0, 0.03]
        self.BEFORE_PLACE_POS = [0.7, -0.1, 0.3]
        self.PLACE_POS = [0.0, 0.0, -0.1]
        self.robot = moveit_commander.RobotCommander(robot_description='robot_description')
        scene = moveit_commander.PlanningSceneInterface()
        # 14 DOF
        self.both_arms_group = moveit_commander.MoveGroupCommander("both_arms", robot_description='robot_description')
        self.left_arm_group = moveit_commander.MoveGroupCommander("left_arm", robot_description='robot_description')
        self.right_arm_group = moveit_commander.MoveGroupCommander("right_arm", robot_description='robot_description')
        self.right_gripper = Gripper('right')
        # self.right_gripper.calibrate()
        self.left_gripper = Gripper('left')
        # self.left_gripper.calibrate()

        self.step = rospy.Service("step", Step, self.step_callback)
        self.test_control = rospy.Service("test_control", ControlTest, self.test_control_callback)

        # create scene 
        self.myscene = Scene(scene)
        self.myscene.create_scene()

        #Go to starting position
        self.go_start_position()


        # attach object
        # rospy.logdebug("============ Available Planning Groups:", self.robot.get_group_names())
        # self.myscene.attach_cup("right_hand", self.robot)

        # self.go_home_position()
        rospy.set_param('move_group/trajectory_execution/allowed_execution_duration_scaling', 10.0)
        self.right_arm_group.set_planning_time(10.0)
        self.left_arm_group.set_planning_time(10.0)

        rospy.loginfo("SET UP READY")

    def go_start_position(self):
        """ go to START position for easier grasping """
        self.both_arms_group.set_joint_value_target(self.START_JOINTS)
        self.execute_path()

    def go_home_position(self):
        """ go to HOME position for easier grasping """

        current = self.both_arms_group.get_current_joint_values()
        target = current.copy()
        for i in range(6):
            target[i] = self.HOME_JOINTS[i]
            target[i+7] = self.HOME_JOINTS[i+7]
            if i == 1:
                target[0] = self.START_JOINTS[0]
                # self.HOME_JOINTS[0] = self.START_JOINTS[0]
                target[7] = self.START_JOINTS[7]
                # self.HOME_JOINTS[7] = self.START_JOINTS[7]
            self.both_arms_group.set_joint_value_target(target)
            self.execute_path()


    def gripper_control(self,state,gripper):
        """Control Of grippers
        Arg
            state --> True  open  gripper
            state --> False close gripper
            gripper --> left_gripper or right_gripper or both
        """
        if(gripper=="left_gripper"):
            if(state):
                self.left_gripper.open(block=False)
            else:
                self.left_gripper.close(block=False)
        elif(gripper=="right_gripper"):
            if(state):
                self.right_gripper.open(block=False)
            else:
                self.right_gripper.close(block=False)   
        elif(gripper=="both"):
            if(state):
                self.right_gripper.open(block=False)
                self.left_gripper.open(block=False)
            else:
                self.right_gripper.close(block=False)  
                self.left_gripper.close(block=False)
        else:
            rospy.logerr("Wrong gripper !")

    def execute_cartesian(self,hand, waypoints, eef_step):
        """ Helper function for compute and execute cartesian path.
        This function will use set_pose instead of the cartesian trajectory plan fraction is below 0.5.

        Args:
            hand(string of Pose) - "left_gripper" or "right_gripper". Select which move group to execute
            waypoint(list) - desired trajectory of hand
            eef_step(float) - step size during each mini waypoint
        """
        for goal in waypoints:
            if hand=="right_gripper":
                plan, frac = self.right_arm_group.compute_cartesian_path([goal],   # waypoints to follow
                                        eef_step,        # eef_step
                                        0.0)         # jump_threshold
                rospy.loginfo(f"frac = {frac}")
                if frac <= 0.5: 
                    rospy.loginfo("use set pose")
                    self.right_arm_group.set_pose_target(goal)
                    (result, plan, frac, errCode) = self.right_arm_group.plan()
                self.right_arm_group.execute(plan, wait=True)
                self.right_arm_group.stop()
                self.right_arm_group.clear_pose_targets()
            elif hand=="left_gripper":
                plan, frac = self.left_arm_group.compute_cartesian_path([goal],   # waypoints to follow
                                        eef_step,        # eef_step
                                        0.0)         # jump_threshold
                rospy.loginfo(f"frac = {frac}")
                if frac <= 0.5: 
                    rospy.loginfo("use set pose")
                    self.right_arm_group.set_pose_target(goal)
                    (result, plan, frac, errCode) = self.right_arm_group.plan()
                self.left_arm_group.execute(plan, wait=True)
                self.left_arm_group.stop()
                self.left_arm_group.clear_pose_targets()
    
    def go_to(self,pose_goal,hand):
        """ helper function for moving gripper to standoff position before grasping cup
            
            Args: 
                pose_goal(Pose) - position of eef
                hand(String) - name of gripper to use
        """
        self.both_arms_group.set_pose_target(pose_goal, end_effector_link = hand)

    def pre_grasp_pos(self,cup_name,hand):
        """ helper function for moving gripper to standoff position before grasping cup
            
            Args: 
                cup_name(String) - name of cup
                hand(String) - name of gripper to use
        """
        pose_goal = self.myscene.get_cup_position(cup_name)
        pose_goal = self.orientation_forward(pose_goal)
        pose_goal.position.x+=self.PRE_GRASP_POS[0]
        pose_goal.position.y+=self.PRE_GRASP_POS[1]
        pose_goal.position.z+=self.PRE_GRASP_POS[2]
        self.go_to(pose_goal,hand)
        

    def grasp_pos(self,name,hand):
        """ helper function for grasping cup
            
            Args: 
                name(String) - name of cup
                hand(String) - name of gripper to use
                after_grasp(String) - whether the hand has graspped the cup
        """
        target = self.GRASP_POS
        pose_goal = self.myscene.get_cup_position(name)
        pose_goal = self.orientation_forward(pose_goal)
        pose_goal.position.x+=target[0]
        pose_goal.position.y+=target[1]
        pose_goal.position.z+=target[2]              

        self.execute_cartesian(hand, [pose_goal], 0.005)
    
    def place_cup_one_hand(self,name,hand):
        """ helper function for grasping cup
            
            Args: 
                name(String) - name of cup
                hand(String) - name of gripper to use
        """

        # before place
        rospy.loginfo("before place")
        target = self.BEFORE_PLACE_POS
        current = self.both_arms_group.get_current_pose(end_effector_link=hand)
        rospy.loginfo(f"current = {current.pose}")

        pose_goal1 = Pose()
        pose_goal1.position.x=current.pose.position.x
        pose_goal1.position.y=current.pose.position.y
        pose_goal1.position.z=target[2]
        pose_goal1 = self.orientation_sideway(pose_goal1, hand)

        pose_goal2 = Pose()
        pose_goal2.position.x=target[0]
        pose_goal2.position.y=current.pose.position.y
        pose_goal2.position.z=target[2]
        pose_goal2 = self.orientation_sideway(pose_goal2, hand)
        
        pose_goal3 = Pose()
        pose_goal3.position.x=target[0]
        pose_goal3.position.y=target[1]
        pose_goal3.position.z=target[2]
        pose_goal3 = self.orientation_sideway(pose_goal3, hand)
        # self.both_arms_group.set_pose_target(pose_goal, end_effector_link = hand)
        # self.execute_path()
        self.execute_cartesian(hand, [pose_goal1, pose_goal2, pose_goal3], 0.1)

        # place
        rospy.loginfo("place")
        pose_goal = pose_goal3
        pose_goal.position.x += self.PLACE_POS[0]
        pose_goal.position.y += self.PLACE_POS[1]
        pose_goal.position.z += self.PLACE_POS[2]
        self.execute_cartesian(hand, [pose_goal], 0.01)
       
        rospy.loginfo("open gripper")
        self.gripper_control(state=True,gripper="both")

        # after place
        rospy.loginfo("after place")
        target = self.BEFORE_PLACE_POS
        pose_goal = self.myscene.get_cup_position(name)
        pose_goal = self.orientation_forward(pose_goal)
        pose_goal.position.x=target[0]
        pose_goal.position.y=target[1]
        pose_goal.position.z=target[2]
        pose_goal = self.orientation_sideway(pose_goal, hand)
        rospy.loginfo(f"goal = {pose_goal}")
        self.both_arms_group.set_pose_target(pose_goal, end_effector_link = hand)
        self.execute_path()


    def grab_and_place_cup(self, name, hand):
        """ grab and place a cup to another position
            
            Args: 
                name(String) - name of cup
                hand(String) - name of gripper to use
        """
        rospy.loginfo("pre grasp")
        self.gripper_control(state=True,gripper="right_gripper")
        self.pre_grasp_pos(name, hand)
        self.execute_path()
        rospy.loginfo("grasp")
        self.grasp_pos(name, hand)

        # self.right_gripper.close(block=True) # <-- comment this out to avoid collision
        self.myscene.attach_cup("right_hand", self.robot, name)
        
        # rospy.loginfo("after grasp")
        # self.grasp_pos(name, hand, "post")

        self.place_cup_one_hand(name, hand)
        

    def execute_path(self):
        """
        find plan for both hands & execute it 
        """
        rospy.logdebug("Executing plan")
        (result, plan, frac, errCode) = self.both_arms_group.plan()
        result = self.both_arms_group.execute(plan, wait=True)
        self.both_arms_group.stop()
        self.both_arms_group.clear_pose_target(end_effector_link = "left_gripper")
        self.both_arms_group.clear_pose_target(end_effector_link = "right_gripper")

    def orientation_forward(self,pose):
        """ helper function for setting the orientation forward at given pose """
        q = quaternion_from_euler(0, 1.5707,0)
        pose.orientation.x = q[0]
        pose.orientation.y = q[1]
        pose.orientation.z = q[2]
        pose.orientation.w = q[3]
        return pose

    def orientation_sideway(self,pose, hand):
        """ helper function for setting the orientation sideway at given pose """
        if hand == "right_gripper":
            q = quaternion_from_euler(-0.785, 1.5707, 0)
        elif hand == "left_gripper":
            q = quaternion_from_euler(0.785, 1.5707, 0)
        pose.orientation.x = q[0]
        pose.orientation.y = q[1]
        pose.orientation.z = q[2]
        pose.orientation.w = q[3]
        return pose

    def place_cup(self,pos,hand):
        pass

    def test_control_callback(self, req):
        """ helper service for testing other services or functions.
            Edit the inputs for service to test different cases.
            Args:
                req.choice - choose which test to execute
                            0. print current pose of left and right arm
                            1. test step service with left arm 
                            2. test step service with right arm 
                            3. set hands at home position
                            4. set hands at grasping position
                            5. set hand to grasp position
                            6. grab cups
                            7. restart scene
                            8. print current joint values
                            9. go to initial start position of robot 
                            10. grab and place cup_3 with right_hand
                            11. -----
                            12. execute cartesian for right hand to current+(0.1, -0.1, 0.1)

                            100. information 
                            101. go to start position
                            102. go to home position
                            103. restart scene 
                            104. set scene InOrder
                            105. execute state 1
                            106. execute state 2


        """
        if req.choice == 0: 
            result = self.current_pose()
            return result.replace('\n', ' ')
        elif req.choice == 8:
            result = self.current_joints()
            return result.replace('\n', ' ')
        elif req.choice == 9:
            self.go_start_position()
            return "go to start position"
        elif req.choice == 1:
            step_service = rospy.ServiceProxy("step", Step)
            result = step_service(open_gripper = False, choose_left = True, x=1.0, y=0.5, z=0.5, r=1.57, p=0.0, yaw=0.0)
            return result.output
        elif req.choice == 2:
            step_service = rospy.ServiceProxy("step", Step)
            result = step_service(open_gripper = True, choose_left = False, x=1.0, y=-0.5, z=0.5, r=1.57, p=0.0, yaw=0.0)
            return result.output
        elif req.choice == 3:
            self.go_home_position()
            return "go to home position"
        elif req.choice == 4:
            # rospy.logdebug("Setting goal for cup 1 ....")
            # self.pre_grasp_pos("Cup_1","left_gripper")
            rospy.logdebug("Setting goal  for cup 3 ....")
            self.gripper_control(state=True,gripper="right_gripper")
            self.pre_grasp_pos("Cup_3","right_gripper")
            self.execute_path()
            rospy.logdebug("Executing pre-grasp")
            return "before grasp cup_3"
        elif req.choice == 5:
            self.grasp_pos("Cup_3", "right_gripper")
            return "grasp cup_3"
        elif req.choice == 6:
            self.gripper_control(state=False,gripper="both")
            self.myscene.attach_cup("left_hand", self.robot,"Cup_1")
            self.myscene.attach_cup("right_hand", self.robot,"Cup_3")
        elif req.choice == 7:
            self.myscene.restart_scene()
        elif req.choice == 10:
            self.grab_and_place_cup("Cup_3", "right_gripper")
            return "grab and place cup_3"
        elif req.choice == 11:
            rospy.logdebug("Executing state 1.....")
            self.state_1()
            rospy.logdebug("Executing state 1 DONE")
            return "Executing state 1 DONE"
        elif req.choice == 12:
            current = self.both_arms_group.get_current_pose(end_effector_link = "right_gripper").pose
            goal1 = Pose()
            goal1.position.x = current.position.x         
            goal1.position.y = current.position.y          
            goal1.position.z = current.position.z + 0.1        
            goal1.orientation = current.orientation
            goal2 = Pose()
            goal2.position.x = current.position.x         
            goal2.position.y = current.position.y - 0.1        
            goal2.position.z = current.position.z + 0.1        
            goal2.orientation = current.orientation            
            goal3 = Pose()
            goal3.position.x = current.position.x + 0.1        
            goal3.position.y = current.position.y - 0.1      
            goal3.position.z = current.position.z + 0.1        
            goal3.orientation = current.orientation
            self.execute_cartesian("right_gripper", [goal1, goal2, goal3], 0.01)
            return "execute cartesian for right hand to current+(0.1, -0.1, 0.1)"


        elif req.choice == 101:
            return "information"
        elif req.choice == 101:
            rospy.logdebug("initiate go to start position")
            self.go_start_position()
            return "go to start position"
        elif req.choice == 102:
            rospy.logdebug("Initiate go to home position")
            self.go_home_position()
            return "go to home position"
        elif req.choice == 103:
            rospy.logdebug("Initiate restart scene")
            self.myscene.restart_scene_workStation()
            return "restart scene "
        elif req.choice == 104:
            rospy.logdebug("Initiate set scene InOrder")
            self.myscene.restart_scene_inline()
            return "set scene InOrder"
        elif req.choice == 105:
            rospy.logdebug("Initiate execute state 1")
            self.state_1()
            return "execute state 1"
        elif req.choice == 106:
            rospy.logdebug("Initiate execute state 2")
            self.state_2()
            return "execute state 2"

        return "N/A"




    def state_1(self):
        """
        gets all cups from random locations and places them sorted at left/right side of the table
        For each arm 
        1 Assign a cup to grasp (left arm gets y>0 right arm gets y<0)
        2 Get position of cup
        3 Go to pregrasping position ( near the cup)
        4 Go to grasping position of cup
        5 Close gripper
        6 Attach cup at robot
        7 Get leaving cup position
        8 Go to leaving position
        9 Open gripper
        10 Detach cup from robot
        11 Go to Home position
        13 Repeat until all cups are sorted
        """
        # NEED TO HANDLE EXPECTION OF ONLY ONE CUP LEFT AND SECOND ARM HAS TO STAY NULL
        #go_home_position
        
        rospy.logerr("Go to home position")
        self.go_home_position()
        #Open gripper
        rospy.logerr("Open grippes")
        self.gripper_control(state=True,gripper="both")

        # Repeat until all cups are sorted
        rospy.logerr("Starting state 1")
        while(not self.myscene.cups_sorted()):

            #Assign a cup to grasp (left arm gets y>0 right arm gets y<0)
            rospy.logerr("Set grasping cups")
            cap_nameL = self.myscene.assing_cup_st1("left_hand")
            cap_nameR = self.myscene.assing_cup_st1("right_hand")   
            cap_nameL = "Cup_1"
            cap_nameR = "Cup_3"



            #Get position of cup
            cap_posL = self.myscene.get_cup_position(cap_nameL)
            cap_posR = self.myscene.get_cup_position(cap_nameR)

            #Go to pregrasping position ( near the cup)
            rospy.logerr("Go to pregrasping position")
            self.pre_grasp_pos(cap_nameL,"left_gripper")
            self.pre_grasp_pos(cap_nameR,"right_gripper")
            self.execute_path()


            
            #Go to grasping position of cup (Cartesian Path)
            rospy.logerr("GO to grasping position")
            self.grasp_pos(cap_nameL, "left_gripper")
            self.grasp_pos(cap_nameR, "right_gripper")
            

            #Close gripper
            rospy.logerr("Close Grippers")
            self.gripper_control(state=False,gripper="both")
            
            #Attach cup at robot
            rospy.logerr("Attach Cups")
            self.myscene.attach_cup("left_hand", self.robot,cap_nameL)
            self.myscene.attach_cup("right_hand", self.robot,cap_nameR)


            #Get leaving cup position 
            # return tuple (x,y)
            rospy.logerr("Get Positon to leave cups ")
            cap_posL =self.myscene.get_next_sorting_position("left_hand")
            cap_posR =self.myscene.get_next_sorting_position("right_hand")

            #Go to leaving position
            rospy.logerr("Go to position leaving cups")
            self.place_cup(cap_posL,"left_gripper")  #NOT IMPLEMENTED
            self.place_cup(cap_posR,"right_gripper") #NOT IMPLEMENTED
            self.go_home_position() #for debuging

            #Open gripper
            rospy.logerr("Open grippes")
            self.gripper_control(state=True,gripper="both")

            # Detach cup from robot
            rospy.logerr("Detach cups")
            self.myscene.detach_cup(cap_nameL,"left_hand")
            self.myscene.detach_cup(cap_nameR,"right_hand")

            # Go to Home position
            self.go_home_position()
            return 1



    def state_2(self):
        """
        from a sorted cup enviroment 
        BUILDS A CUP TOWER !
        """
        pass




    def current_pose(self):
        """ helper function for debugging current pose of gripper """
        left_current = self.both_arms_group.get_current_pose(end_effector_link = "left_gripper")
        q = left_current.pose.orientation
        left_angles = transformations.euler_from_quaternion([q.x, q.y, q.z, q.w])

        right_current = self.both_arms_group.get_current_pose(end_effector_link = "right_gripper")
        q = right_current.pose.orientation
        right_angles = transformations.euler_from_quaternion([q.x, q.y, q.z, q.w])
        return f"left pos = {left_current.pose.position}, left euler = {left_angles}; right pos = {right_current.pose.position}, right euler = {right_angles}"
        
    def current_joints(self):
        """ helper function for debugging current joint of gripper """
        current = self.both_arms_group.get_current_joint_values()
        return f"joints = {np.round(current,2)}"

    def step_callback(self, req):
        """ Helper funciton for step service
        Cup is about 10 cm. Left arm should handle cup with y > 0, and right arm should handle cup with y < 0.
        Cup should be grabbed on its side (ie. euler angles = [pi/2., 0, 0]). 

        Args:
            req (Step) 
                req.open_gripper (bool) - determines whether the gripper should be open at give position
                req.choose_left
                req.x
                req.y
                req.z
                req.r
                req.p
                req.yaw

        Returns: 
            string  - "Error Code = <the error code returned by the moveit MoveGroupCommander>
        """
        # arms
        pose_goal = Pose()
        pose_goal.position.x = req.x
        pose_goal.position.y = req.y
        pose_goal.position.z = req.z

        q1 = transformations.quaternion_from_euler(req.r, req.p, req.yaw, 'ryxz')
        pose_goal.orientation = Quaternion(*q1)
        
        ee_link = "left_gripper" if req.choose_left else "right_gripper" 
        rospy.loginfo(f"Moving {ee_link}")
        self.both_arms_group.set_pose_target(pose_goal, end_effector_link = ee_link)
        (result, plan, frac, errCode) = self.both_arms_group.plan()

        result = self.both_arms_group.execute(plan, wait=True)
        self.both_arms_group.stop()
        self.both_arms_group.clear_pose_target(end_effector_link = ee_link)

        # grippers
        if req.open_gripper and req.choose_left:
            self.left_gripper.open(block=True)
        elif req.open_gripper and not req.choose_left:
            self.right_gripper.open(block=True)
        elif not req.open_gripper and req.choose_left:
            self.left_gripper.close(block=True)
        elif not req.open_gripper and not req.choose_left:
            self.right_gripper.close(block=True)

        return f"Error Code = {errCode.val}"


def main():
    """ The main() function. """
    moveit_commander.roscpp_initialize(sys.argv)
    rospy.loginfo(sys.argv)
    rospy.init_node('control_arm',log_level=rospy.DEBUG)
    handler = Handler()
    rospy.spin()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass